Walmart Data Analysis Project MySQL Queries

- Display Record.

select * from walmart limit 10;

- Count the category record

select count(category) from walmart;

- Count the unique category record

select count(distinct category) from walmart;

- Count the unique city records

select count(distinct city) from walmart;


#Questions

1. Find different payment methods, number of transactions, and quantity sold by payment method

select payment_method,
sum(quantity) as no_qty_sold,
count(*) as number_of_payments
from walmart
group by payment_method;


2. Identify the highest-rated category in each branch and Display the branch, category, and avg rating

select branch, category,avg(rating) as avg_rating
from walmart
group by branch, category
order by branch, avg(rating) desc
limit 10;


select branch,category,avg_rating,
rank() over (partition by branch order by avg_rating DESC) as rank_position
from (select branch,category,avg(rating) as avg_rating
from walmart
group by branch, category
) as subquery
limit 10;


3. Identify the busiest day for each branch based on number of transaction

select date,
DAYNAME(STR_TO_DATE(date, '%d/%m/%y')) as day_name
from walmart
limit 10;


select branch,
DAYNAME(STR_TO_DATE(date, '%d/%m/%y')) as day_name,
count(*) as no_transactions
from walmart
group by branch,day_name
order by branch, no_transactions desc
limit 10;


WITH ranked AS (
select branch,
DAYNAME(STR_TO_DATE(date, '%d/%m/%Y')) as day_name,
count(*) as no_transactions,
rank() over (partition by branch order by count(*) desc) as `rank`
from walmart
group by branch, day_name
)
select branch, day_name, no_transactions
from ranked
where `rank` = 1
limit 10;


4. Calculate the total quantity of items sold per payment method

select payment_method, sum(quantity) as no_qty_sold
from walmart
group by payment_method;


5. Determine the average, minimum, and maximum rating of categories for each city

select city,category,
min(rating) as min_rating,
max(rating) as max_rating,
avg(rating) as avg_rating
from walmart
group by city, category
limit 10;


6. Calculate the total profit for each category

select
category,
round(SUM(unit_price * quantity * profit_margin), 1) as total_profit
from walmart
group by category
order by total_profit desc
limit 10;


7. Determine the most common payment method for each branch

WITH cte as(
select branch,payment_method,
count(*) as total_trans,
rank() over(partition by branch order by count(*) desc) as `rank`
from walmart
group by branch, payment_method
)
select branch, payment_method as preferred_payment_method
from cte
where `rank` = 1
limit 10;


8. Categorize sales into Morning, Afternoon, and Evening shifts

select branch,
    case
        when hour(TIME(time)) < 12 THEN 'Morning'
        when hour(TIME(time)) between 12 AND 17 THEN 'Afternoon'
        else'Evening'
    end as shift,
    count(*) as num_invoices
from walmart
group by branch, shift
order by branch, num_invoices desc
limit 10;


9. Identify the 5 branches with the highest revenue decrease ratio from last year to current year(i.e 2022 to 2023)

WITH revenue_2022 as(
    select
        branch,
        sum(total) as revenue
    from walmart
    where YEAR(STR_TO_DATE(date, '%d/%m/%Y')) = 2022
    group by branch
),
revenue_2023 AS (
    select 
        branch,
        sum(total) as revenue
    from walmart
    where YEAR(STR_TO_DATE(date, '%d/%m/%Y')) = 2023
    group by branch
)
select
    r2022.branch,
    r2022.revenue as last_year_revenue,
    r2023.revenue as current_year_revenue,
    round(((r2022.revenue - r2023.revenue) / r2022.revenue) * 100, 2) as revenue_decrease_ratio
from revenue_2022 as r2022
join revenue_2023 as r2023 ON r2022.branch = r2023.branch
where r2022.revenue > r2023.revenue
order by revenue_decrease_ratio desc
limit 5;

